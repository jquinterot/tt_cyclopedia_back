services:
  app:
    build: .
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    environment:
      - DOCKER_ENV=true
      - SQL_DB=postgresql://postgres:postgres@db:5432/tt_cyclopedia
      - CLOUDINARY_CLOUD_NAME=${CLOUDINARY_CLOUD_NAME}
      - CLOUDINARY_API_KEY=${CLOUDINARY_API_KEY}
      - CLOUDINARY_API_SECRET=${CLOUDINARY_API_SECRET}
    volumes:
      - .:/app
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/health" ]
      interval: 30s
      timeout: 10s
      retries: 5

  db:
    image: postgres:15
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=tt_cyclopedia
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d tt_cyclopedia"]
      interval: 5s
      timeout: 5s
      retries: 5

  mongo:
    image: mongo:6
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  test:
    build: 
      context: .
      dockerfile: Dockerfile
      target: test
    depends_on:
      db:
        condition: service_healthy
      mongo:
        condition: service_healthy
    environment:
      DOCKER_ENV: "true"
      SQL_DB: "postgresql://postgres:postgres@db:5432/tt_cyclopedia"
      SQL_LITE_DB: "sqlite:///:memory:"
      TEST_SQL_DB: "sqlite:///:memory:"
      MONGO_DB: "mongodb://mongo:27017"
      MONGO_DB_NAME: "tt_cyclopedia"
      JWT_SECRET_KEY: "test_secret_key_for_docker_tests"
      CLOUDINARY_CLOUD_NAME: "test_cloud_name"
      CLOUDINARY_API_KEY: "test_api_key"
      CLOUDINARY_API_SECRET: "test_api_secret"
      ENVIRONMENT: "development"
    volumes:
      - .:/app
    command: python3 -m pytest app/tests/ -v --tb=short --maxfail=1

volumes:
  postgres_data:
  mongo_data: 